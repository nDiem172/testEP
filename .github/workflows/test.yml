# CI/CD workflow for microservices: test (matrix), build & push Docker images, deploy (docker compose) on main
name: CI/CD - Microservices with Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20.x

permissions:
  contents: read

jobs:
  test:
    name: Test - ${{ matrix.service }}
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")' || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=5
      rabbitmq:
        image: rabbitmq:3.8-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s --health-timeout=5s --health-retries=5

    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
        node-version: [${{ env.NODE_VERSION }}]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Prepare service env for tests (if required)
        shell: bash
        run: |
          # Create minimal .env files only for services that need them in tests
          if [ "${{ matrix.service }}" = "auth" ]; then
            mkdir -p auth
            echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" > auth/.env || true
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env || true
          fi
          if [ "${{ matrix.service }}" = "product" ]; then
            mkdir -p product
            echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" > product/.env || true
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env || true
            echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env || true
            echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env || true
          fi

      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: |
          # Fail job if tests fail. If you prefer non-blocking tests, append "|| true"
          if npm test --if-present; then
            echo "Tests passed for ${{ matrix.service }}"
          else
            echo "Tests failed for ${{ matrix.service }}"
            exit 1
          fi

      - name: Build (optional)
        working-directory: ./${{ matrix.service }}
        run: npm run build --if-present

  docker-build-push:
    name: Build & Push Docker images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [auth, order, product, api-gateway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy (docker compose) on main
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create production docker-compose file
        run: |
          cat > docker-compose.prod.yml <<'EOF'
          version: "3.9"
          services:
            auth:
              image: ${DOCKER_REGISTRY_PREFIX}${DOCKER_USERNAME}/auth-cicd:latest
              container_name: auth-cicd
              ports:
                - "3000:3000"
              networks:
                - cicd-network

            rabbitmq:
              image: rabbitmq:3.8-management-alpine
              container_name: rabbitmq-cicd
              ports:
                - "5672:5672"
                - "15672:15672"
              volumes:
                - rabbitmq_data:/var/lib/rabbitmq/
              networks:
                - cicd-network

            order:
              image: ${DOCKER_REGISTRY_PREFIX}${DOCKER_USERNAME}/order-cicd:latest
              container_name: order-cicd
              ports:
                - "3002:3002"
              depends_on:
                - rabbitmq
              environment:
                - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
              networks:
                - cicd-network

            product:
              image: ${DOCKER_REGISTRY_PREFIX}${DOCKER_USERNAME}/product-cicd:latest
              container_name: product-cicd
              ports:
                - "3001:3001"
              depends_on:
                - rabbitmq
              environment:
                - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
              networks:
                - cicd-network

            api-gateway:
              image: ${DOCKER_REGISTRY_PREFIX}${DOCKER_USERNAME}/api-gateway-cicd:latest
              container_name: gateway-cicd
              ports:
                - "3003:3003"
              environment:
                - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
              networks:
                - cicd-network

            mongo:
              image: mongo:6
              container_name: mongodb-cicd
              ports:
                - "27017:27017"
              volumes:
                - mongo_data:/data/db
              networks:
                - cicd-network

          networks:
            cicd-network:
              driver: bridge

          volumes:
            mongo_data:
            rabbitmq_data:
          EOF
        env:
          # If you use a private registry like ghcr.io set DOCKER_REGISTRY_PREFIX to "ghcr.io/"
          DOCKER_REGISTRY_PREFIX: ${{ secrets.DOCKER_REGISTRY_PREFIX || '' }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Ensure Docker engine available
        run: docker info

      - name: Pull and start services
        run: |
          docker compose -f docker-compose.prod.yml pull --ignore-pull-failures || true
          docker compose -f docker-compose.prod.yml up -d
          sleep 20
          docker compose -f docker-compose.prod.yml ps

      - name: Smoke tests (best-effort)
        continue-on-error: true
        run: |
          curl -sSf http://localhost:3003 || echo "Gateway not healthy yet"
          curl -sSf http://localhost:3000 || echo "Auth not healthy yet"
          curl -sSf http://localhost:3001 || echo "Product not healthy yet"
          curl -sSf http://localhost:3002 || echo "Order not healthy yet"

      - name: Cleanup (always)
        if: always()
        run: docker compose -f docker-compose.prod.yml down --remove-orphans --volumes